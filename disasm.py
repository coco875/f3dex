def decodes():
    file = open("goal/F3DEX.bin", "rb").read()
    for i in range(0, len(file), 4):
        int_instruction = int.from_bytes(file[i:i+4], byteorder='big')
        print(decode_opcode(int_instruction))


#     31---------26---------------------------------------------------0
#     |  opcode   |                                                   |
#     ------6----------------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
# 000 | *1    | *2    | J     | JAL   | BEQ   | BNE   | BLEZ  | BGTZ  | 00..07
# 001 | ADDI  | ADDIU | SLTI  | SLTIU | ANDI  | ORI   | XORI  | LUI   | 08..0F
# 010 | *3    | *4    | *5    | ---   | BEQL  | BNEL  | BLEZL | BGTZL | 10..17
# 011 | DADDI | DADDIU| LDL   | LDR   | ---   | ---   | LQ    | SQ    | 18..1F
# 100 | LB    | LH    | LWL   | LW    | LBU   | LHU   | LWR   | LWU   | 20..27
# 101 | SB    | SH    | SWL   | SW    | SDL   | SDR   | SWR   | CACHE | 28..2F
# 110 | LL    | LWC1  | LV.S  | ---   | LLD   | ULV.Q | LV.Q  | LD    | 30..37
# 111 | SC    | SWC1  | SV.S  | ---   | SCD   | USV.Q | SV.Q  | SD    | 38..3F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|
#		*1 = SPECIAL	*2 = REGIMM		*3 = COP0		*4 = COP1		*5 = COP2

def decode_opcode(asm_instruction:int):
    opcode = asm_instruction >> 26
    match opcode:
        case 0b000000:
            return decode_special(asm_instruction)
        case 0b000001:
            return decode_regimm(asm_instruction)
        case 0b010000:
            return decode_cop0(asm_instruction)
        case 0b010001:
            return decode_cop1(asm_instruction)
        case 0b010010:
            return decode_cop2(asm_instruction)
        case _:
            return opcodes[opcode]

opcodes = {
    0b000010: "j",
    0b000011: "jal",
    0b000100: "beq",
    0b000101: "bne",
    0b000110: "blez",
    0b000111: "bgtz",
    0b001000: "addi",
    0b001001: "addiu",
    0b001010: "slti",
    0b001011: "sltiu",
    0b001100: "andi",
    0b001101: "ori",
    0b001110: "xori",
    0b001111: "lui",
    0b010100: "beql",
    0b010101: "bnel",
    0b010110: "blezl",
    0b010111: "bgtzl",
    0b011000: "daddi",
    0b011001: "daddiu",
    0b011010: "ldl",
    0b011011: "ldr",
    0b011110: "lq",
    0b011111: "sq",
    0b100000: "lb",
    0b100001: "lh",
    0b100010: "lwl",
    0b100011: "lw",
    0b100100: "lbu",
    0b100101: "lhu",
    0b100110: "lwr",
    0b100111: "lwu",
    0b101000: "sb",
    0b101001: "sh",
    0b101010: "swl",
    0b101011: "sw",
    0b101100: "sdl",
    0b101101: "sdr",
    0b101110: "swr",
    0b101111: "cache",
    0b110000: "ll",
    0b110001: "lwc1",
    0b110010: "lv.s",
    0b110100: "lld",
    0b110101: "ulv.q",
    0b110110: "lv.q",
    0b110111: "ld",
    0b111000: "sc",
    0b111001: "swc1",
    0b111010: "sv.s",
    0b111100: "scd",
    0b111101: "usv.q",
    0b111110: "sv.q",
    0b111111: "sd"
}

#     31---------26------------------------------------------5--------0
#     |=   SPECIAL|                                         | function|
#     ------6----------------------------------------------------6-----
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
# 000 | SLL   | ---   | SRL*1 | SRA   | SLLV  |  ---  | SRLV*2| SRAV  | 00..07
# 001 | JR    | JALR  | MOVZ  | MOVN  |SYSCALL| BREAK |  ---  | SYNC  | 08..0F
# 010 | MFHI  | MTHI  | MFLO  | MTLO  | DSLLV |  ---  |   *3  |  *4   | 10..17
# 011 | MULT  | MULTU | DIV   | DIVU  | MADD  | MADDU | ----  | ----- | 18..1F
# 100 | ADD   | ADDU  | SUB   | SUBU  | AND   | OR    | XOR   | NOR   | 20..27
# 101 | mfsa  | mtsa  | SLT   | SLTU  |  *5   |  *6   |  *7   |  *8   | 28..2F
# 110 | TGE   | TGEU  | TLT   | TLTU  | TEQ   |  ---  | TNE   |  ---  | 30..37
# 111 | dsll  |  ---  | dsrl  | dsra  |dsll32 |  ---  |dsrl32 |dsra32 | 38..3F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|
# *1:	rotr when rs = 1 (PSP only)		*2:	rotrv when sa = 1 (PSP only)
# *3:	dsrlv on PS2, clz on PSP		*4:	dsrav on PS2, clo on PSP
# *5:	dadd on PS2, max on PSP			*6:	daddu on PS2, min on PSP
# *7:	dsub on PS2, msub on PSP		*8:	dsubu on PS2, msubu on PSP

def decode_special(asm_instruction:int):
    function_code = asm_instruction & 0b111111
    return special_opcodes[function_code]


special_opcodes = {
    0b000000: "sll",
    0b000010: "srl",
    0b000011: "sra",
    0b000100: "sllv",
    0b000110: "srlv",
    0b000111: "srav",
    0b001000: "jr",
    0b001001: "jalr",
    0b001010: "movz",
    0b001011: "movn",
    0b001100: "syscall",
    0b001101: "break",
    0b001111: "sync",
    0b010000: "mfhi",
    0b010001: "mthi",
    0b010010: "mflo",
    0b010011: "mtlo",
    0b010100: "dsllv",
    0b011000: "mult",
    0b011001: "multu",
    0b011010: "div",
    0b011011: "divu",
    0b011100: "madd",
    0b011101: "maddu",
    0b100000: "add",
    0b100001: "addu",
    0b100010: "sub",
    0b100011: "subu",
    0b100100: "and",
    0b100101: "or",
    0b100110: "xor",
    0b100111: "nor",
    0b101000: "mfsa",
    0b101001: "mtsa",
    0b101010: "slt",
    0b101011: "sltu",
    0b110000: "tge",
    0b110001: "tgeu",
    0b110010: "tlt",
    0b110011: "tltu",
    0b110100: "teq",
    0b110110: "tne",
    0b111000: "dsll",
    0b111010: "dsrl",
    0b111011: "dsra",
    0b111100: "dsll32",
    0b111110: "dsrl32",
    0b111111: "dsra32"
}

#     REGIMM: encoded by the rt field when opcode field = REGIMM.
#     31---------26----------20-------16------------------------------0
#     |=    REGIMM|          |   rt    |                              |
#     ------6---------------------5------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 | BLTZ  | BGEZ  | BLTZL | BGEZL |  ---  |  ---  |  ---  |  ---  | 00-07
#  01 | tgei  | tgeiu | tlti  | tltiu | teqi  |  ---  | tnei  |  ---  | 08-0F
#  10 | BLTZAL| BGEZAL|BLTZALL|BGEZALL|  ---  |  ---  |  ---  |  ---  | 10-17
#  11 | mtsab | mtsah |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18-1F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_regimm(asm_instruction:int):
    rt = (asm_instruction >> 16) & 0b11111
    return regimm_opcodes[rt]

regimm_opcodes = {
    0b00000: "bltz",
    0b00001: "bgez",
    0b00010: "bltzl",
    0b00011: "bgezl",
    0b00100: "tgei",
    0b00101: "tgeiu",
    0b00110: "tlti",
    0b00111: "tltiu",
    0b01000: "teqi",
    0b01010: "tnei",
    0b10000: "bltzal",
    0b10001: "bgezal",
    0b10010: "bltzall",
    0b10011: "bgezall",
    0b11000: "mtsab",
    0b11001: "mtsah"
}

#     31---------26---------21----------------------------------------0
#     |=      COP0|    rs    |                                        |
#     -----6-------5---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |  MFC0 | DMFC0 |  ---  |  ---  |  MTC0 | DMTC0 |  ---  |  ---  | 00..07
#  01 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 08..0F
#  10 |FUNCT* |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 10..17
#  11 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18..1F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop0(asm_instruction:int):
    rs = (asm_instruction >> 21) & 0b11111
    match rs:
        case 0b10000:
            return decode_cop0funct(asm_instruction)
        case _:
            return cop0_opcodes[rs]

cop0_opcodes = {
    0b00000: "mfc0",
    0b00001: "dmfc0",
    0b00100: "mtc0",
    0b00101: "dmtc0"
}

#     31--------------------21-------------------------------5--------0
#     |=            COP0FUNCT|                              | function|
#     -----11----------------------------------------------------6-----
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
# 000 |  ---  | TLBR  | TLBWI |  ---  |  ---  |  ---  | TLBWR |  ---  | 00..07
# 001 | TLBP  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 08..0F
# 010 | RFE   |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 10..17
# 011 | ERET  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18..1F
# 100 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 20..27
# 101 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 28..2F
# 110 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 30..37
# 110 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 38..3F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop0funct(asm_instruction:int):
    function_code = asm_instruction & 0b111111
    return cop0funct_opcodes[function_code]

cop0funct_opcodes = {
    0b000001: "tlbr",
    0b000010: "tlbwi",
    0b000110: "tlbwr",
    0b001000: "tlbp",
    0b010000: "rfe",
    0b011000: "eret"
}

#     31---------26---------21----------------------------------------0
#     |=      COP1|    rs    |                                        |
#     -----6-------5---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |  MFC1 | DMFC1 |  CFC1 |  ---  |  MTC1 | DMTC1 |  CTC1 |  ---  | 00..07
#  01 |  BC*  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 08..0F
#  10 |  S*   |  ---  |  ---  |  ---  |  W*   |  ---  |  ---  |  ---  | 10..17
#  11 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18..1F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop1(asm_instruction:int):
    rs = (asm_instruction >> 21) & 0b11111
    match rs:
        case 0b01000:
            return decode_cop1bc(asm_instruction)
        case 0b10000:
            return decode_cop1s(asm_instruction)
        case 0b10100:
            return decode_cop1w(asm_instruction)
        case _:
            return cop1_opcodes[rs]

cop1_opcodes = {
    0b00000: "mfc1",
    0b00001: "dwfc1",
    0b00010: "cfc1",
    0b00100: "mtc1",
    0b00101: "dmtc1",
    0b00110: "ctc1"
}

#     31---------26----------20-------16------------------------------0
#     |=    COP1BC|          |   rt    |                              |
#     ------11--------------5------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |  BC1F | BC1T  | BC1FL | BC1TL |  ---  |  ---  |  ---  |  ---  | 00..07
#  01 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 08..0F
#  10 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 10..17
#  11 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18..1F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop1bc(asm_instruction:int):
    rt = (asm_instruction >> 16) & 0b11111
    return cop1bc_opcodes[rt]

cop1bc_opcodes = {
    0b00000: "bc1f",
    0b00001: "bc1t",
    0b00010: "bc1fl",
    0b00011: "bc1tl"
}

#     31--------------------21-------------------------------5--------0
#     |=                COP1S|                              | function|
#     -----11----------------------------------------------------6-----
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
# 000 |  add  |  sub  |  mul  |  div  | sqrt  |  abs  |  mov  |  neg  | 00..07
# 001 |round.l|trunc.l|ceil.l |floor.l|round.w|trunc.w|ceil.w |floor.w| 08..0F
# 010 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | rsqrt |  ---  | 10..17
# 011 | adda  | suba  | mula  |  ---  | madd  | msub  | madda | msuba | 18..1F
# 100 |  ---  | cvt.d |  ---  |  ---  | cvt.w | cvt.l |  ---  |  ---  | 20..27
# 101 |  max  |  min  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 28..2F
# 110 |  c.f  | c.un  | c.eq  | c.ueq |c.(o)lt| c.ult |c.(o)le| c.ule | 30..37
# 111 |  c.sf | c.ngle| c.seq | c.ngl | c.lt  | c.nge | c.le  | c.ngt | 38..3F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop1s(asm_instruction:int):
    function_code = asm_instruction & 0b111111
    return cop1s_opcodes[function_code]

cop1s_opcodes = {
    0b000000: "add.s",
    0b000001: "sub.s",
    0b000010: "mul.s",
    0b000011: "div.s",
    0b000100: "sqrt.s",
    0b000101: "abs.s",
    0b000110: "mov.s",
    0b000111: "neg.s",
    0b001000: "round.l.s",
    0b001001: "trunc.l.s",
    0b001010: "ceil.l.s",
    0b001011: "floor.l.s",
    0b001100: "round.w.s",
    0b001101: "trunc.w.s",
    0b001110: "ceil.w.s",
    0b001111: "floor.w.s",
    0b010110: "rsqrt.s",
    0b011000: "adda.s",
    0b011001: "suba.s",
    0b011010: "mula.s",
    0b011100: "madd.s",
    0b011101: "msub.s",
    0b011110: "madda.s",
    0b011111: "msuba.s",
    0b100001: "cvt.d.s",
    0b100100: "cvt.w.s",
    0b100101: "cvt.l.s",
    0b101000: "max.s",
    0b101001: "min.s",
    0b110000: "c.f.s",
    0b110001: "c.un.s",
    0b110010: "c.eq.s",
    0b110011: "c.ueq.s",
    0b110100: "c.olt.s",
    0b110101: "c.ult.s",
    0b110110: "c.ole.s",
    0b110111: "c.ule.s",
    0b111000: "c.sf.s",
    0b111001: "c.ngle.s",
    0b111010: "c.seq.s",
    0b111011: "c.ngl.s",
    0b111100: "c.lt.s",
    0b111101: "c.nge.s",
    0b111110: "c.le.s",
    0b111111: "c.ngt.s"
}

#     31--------------------21-------------------------------5--------0
#     |=                COP1D|                              | function|
#     -----11----------------------------------------------------6-----
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
# 000 |  add  |  sub  |  mul  |  div  | sqrt  |  abs  |  mov  |  neg  | 00..07
# 001 |round.l|trunc.l|ceil.l |floor.l|round.w|trunc.w|ceil.w |floor.w| 08..0F
# 010 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 10..17
# 011 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18..1F
# 100 | cvt.s |  ---  |  ---  |  ---  | cvt.w | cvt.l |  ---  |  ---  | 20..27
# 101 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 28..2F
# 110 |  c.f  | c.un  | c.eq  | c.ueq | c.olt | c.ult | c.ole | c.ule | 30..37
# 110 |  c.sf | c.ngle| c.seq | c.ngl | c.lt  | c.nge | c.le  | c.ngt | 38..3F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop1d(asm_instruction:int):
    function_code = asm_instruction & 0b111111
    return cop1d_opcodes[function_code]

cop1d_opcodes = {
    0b000000: "add.d",
    0b000001: "sub.d",
    0b000010: "mul.d",
    0b000011: "div.d",
    0b000100: "sqrt.d",
    0b000101: "abs.d",
    0b000110: "mov.d",
    0b000111: "neg.d",
    0b001000: "round.l.d",
    0b001001: "trunc.l.d",
    0b001010: "ceil.l.d",
    0b001011: "floor.l.d",
    0b001100: "round.w.d",
    0b001101: "trunc.w.d",
    0b001110: "ceil.w.d",
    0b001111: "floor.w.d",
    0b100000: "cvt.s.d",
    0b100100: "cvt.w.d",
    0b100101: "cvt.l.d",
    0b110000: "c.f.d",
    0b110001: "c.un.d",
    0b110010: "c.eq.d",
    0b110011: "c.ueq.d",
    0b110100: "c.olt.d",
    0b110101: "c.ult.d",
    0b110110: "c.ole.d",
    0b110111: "c.ule.d",
    0b111000: "c.sf.d",
    0b111001: "c.ngle.d",
    0b111010: "c.seq.d",
    0b111011: "c.ngl.d",
    0b111100: "c.lt.d",
    0b111101: "c.nge.d",
    0b111110: "c.le.d",
    0b111111: "c.ngt.d"
}

#     31--------------------21-------------------------------5--------0
#     |=                COP1W|                              | function|
#     -----11----------------------------------------------------6-----
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
# 000 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 00..07
# 001 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 08..0F
# 010 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 10..17
# 011 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18..1F
# 100 | cvt.s | cvt.d |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 20..27
# 101 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 28..2F
# 110 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 30..37
# 110 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 38..3F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop1w(asm_instruction:int):
    function_code = asm_instruction & 0b111111
    return cop1w_opcodes[function_code]

cop1w_opcodes = {
    0b100000: "cvt.s.w",
    0b100001: "cvt.d.w"
}

#     31---------26---------21----------------------------------------0
#     |=      COP2|    rs    |                                        |
#     -----6-------5---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |  MFC2 |  ---  |  CFC2 |  MFV  |  MTC2 |  ---  |  CTC2 |  MTV  |
#  01 |  BC*  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  10 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  11 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop2(asm_instruction:int):
    rs = (asm_instruction >> 21) & 0b11111
    match rs:
        case 0b01000:
            return decode_cop2bc(asm_instruction)
        case _:
            print(asm_instruction)
            return cop2_opcodes[rs]

cop2_opcodes = {
    0b00000: "mfc2",
    0b00010: "cfc2",
    0b00011: "mfv",
    0b00100: "mtc2",
    0b00110: "ctc2",
    0b00111: "mtv"
}

#     COP2BC: ? indicates any, * indicates all
#     31---------26----------20-------16------------------------------0
#     |=    COP2BC|          |   rt    |                              |
#     ------11---------5-----------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |  BVFx |  BVTx | BVFLx | BVTLx |  BVFy |  BVTy | BVFLy | BVTLy |
#  01 |  BVFz |  BVTz | BVFLz | BVTLz |  BVFw |  BVTw | BVFLw | BVTLw |
#  10 |  BVF? |  BVT? | BVFL? | BVTL? |  BVF* |  BVT* | BVFL* | BVTL* |
#  11 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

def decode_cop2bc(asm_instruction:int):
    rt = (asm_instruction >> 16) & 0b11111
    return cop2bc_opcodes[rt]

cop2bc_opcodes = {
    0b00000: "bvf",
    0b00001: "bvt",
    0b00010: "bvfl",
    0b00011: "bvtl"
}

#     31---------26-----23--------------------------------------------0
#     |= VFPU0    |  VOP |
#     ------6--------3-------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--|
# 000 | VADD  | VSUB  | VSBN  | ---   | ---   | ---   | ---   | VDIV  | 00..07
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu0_opcodes = {
    0b000: "vadd.S",
    0b001: "vsub.S",
    0b010: "vsbn.S",
    0b111: "vdiv.S"
}

#     31-------26-----23----------------------------------------------0
#     |=   VFPU1|  f  |                                               |
#     -----6-------3---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--|
#     |  VMUL |  VDOT |  VSCL |  ---  |  VHDP |  VDET |  VCRS |  ---  |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu1_opcodes = {
    0b000: "vmul.S",
    0b001: "vdot.S",
    0b010: "vscl.S",
    0b100: "vhdp.S",
    0b101: "vdet.S",
    0b110: "vcrs.S"
}

#     31-------26-----23----------------------------------------------0
#     |=   VFPU3|  f  |                                               |
#     -----6-------3---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--|
#     |  VCMP |  ---  |  VMIN |  VMAX |  ---  | VSCMP |  VSGE |  VSLT |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu3_opcodes = {
    0b000: "vcmp.S",
    0b010: "vmin.S",
    0b011: "vmax.S",
    0b101: "vscmp.S",
    0b110: "vsge.S",
    0b111: "vslt.S"
}

#     31-------26--------------------------------------------5--------0
#     |=SPECIAL3|                                           | function|
#     -----11----------------------------------------------------6-----
#     -----6-------5---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
# 000 |  EXT  |  ---  |  ---  |  ---  |  INS  |  ---  |  ---  |  ---  |
# 001 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
# 010 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
# 011 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
# 100 |ALLEGRE|  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
# 101 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
# 110 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
# 110 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

special3_opcodes = {
    0b000000: "ext",
    0b000100: "ins"
}

#     31-------26----------------------------------10--------5--------0
#     |=SPECIAL3|                                 | secfunc |ALLEGREX0|
#     ------11---------5-------------------------------5---------6-----
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |  ---  |  ---  | WSBH  | WSBW  |  ---  |  ---  |  ---  |  ---  |
#  01 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  10 |  SEB  |  ---  |  ---  |  ---  |BITREV |  ---  |  ---  |  ---  |
#  11 |  SEH  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

special3_secfunc_opcodes = {
    0b000000: "wsbh",
    0b000001: "wsbw",
    0b010000: "seb",
    0b110000: "seh"
}

#     VFPU4: This one is a bit messy.
#     31-------26------21---------------------------------------------0
#     |=   VFPU4|  rs  |                                              |
#     -----6-------5---------------------------------------------------
#  hi |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |VF4-1.1|VF4-1.2|VF4-1.3| VCST  |  ---  |  ---  |  ---  |  ---  |
#  01 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  10 | VF2IN | VF2IZ | VF2IU | VF2ID | VI2F  | VCMOV |  ---  |  ---  |
#  11 | VWBN  | VWBN  | VWBN  | VWBN  | VWBN  | VWBN  | VWBN  | VWBN  |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu4_opcodes = {
    0b00011: "vcst.S",
    0b10000: "vf2in.S",
    0b10001: "vf2iz.S",
    0b10010: "vf2iu.S",
    0b10011: "vf2id.S",
    0b10100: "vi2f.S",
    0b10101: "vcmov.S",
    0b11000: "vwbn.S"
}

#     31-------------21-------16--------------------------------------0
#     |= VF4-1.1      |   rt  |                                       |
#     --------11----------5--------------------------------------------
#  hi |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 | VMOV  | VABS  | VNEG  | VIDT  | vsAT0 | vsAT1 | VZERO | VONE  |
#  01 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  10 | VRCP  | VRSQ  | vsIN  | VCOS  | VEXP2 | VLOG2 | vsQRT | VASIN |
#  11 | VNRCP |  ---  | VNSIN |  ---  |VREXP2 |  ---  |  ---  |  ---  |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu4_1_1_opcodes = {
    0b000000: "vmov.S",
    0b000001: "vabs.S",
    0b000010: "vneg.S",
    0b000011: "vidt.S",
    0b000100: "vsat0.S",
    0b000101: "vsat1.S",
    0b000110: "vzero.S",
    0b000111: "vone.S",
    0b001000: "vrcp.S",
    0b001001: "vrsq.S",
    0b001010: "vsin.S",
    0b001011: "vcos.S",
    0b001100: "vexp2.S",
    0b001101: "vlog2.S",
    0b001110: "vsqrt.S",
    0b001111: "vasin.S",
    0b010000: "vnrpc.S",
    0b010010: "vnsin.S",
    0b010100: "vrex2.S"
}

#     VFPU4 1.2: TODO: Unsure where vsBZ goes, no one uses it.
#     31-------------21-------16--------------------------------------0
#     |= VF4-1.2      |   rt  |                                       |
#     --------11----------5--------------------------------------------
#  hi |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 | VRNDS | VRNDI |VRNDF1 |VRNDF2 |  ---  |  ---  |  ---  |  ---  |
#  01 |  ---  |  ---  |  ---  |  ---  | vsBZ? |  ---  |  ---  |  ---  |
#  10 |  ---  |  ---  | VF2H  | VH2F  |  ---  |  ---  | vsBZ? | VLGB  |
#  11 | VUC2I | VC2I  | VUS2I | vs2I  | VI2UC | VI2C  | VI2US | VI2S  |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu4_1_2_opcodes = {
    0b000000: "vrnds.S",
    0b000001: "vrndi.S",
    0b000010: "vrndf1.S",
    0b000011: "vrndf2.S",
    0b010010: "vf2h.S",
    0b010011: "vh2f.S",
    0b010110: "vlgb.S",
    0b110000: "vuc2i.S",
    0b110001: "vc2i.S",
    0b110010: "vus2i.S",
    0b110011: "vs2i.S",
    0b110100: "vi2uc.S",
    0b110101: "vi2c.S",
    0b110110: "vi2us.S",
    0b110111: "vi2s.S"
}

#     31--------------21------16--------------------------------------0
#     |= VF4-1.3      |   rt  |                                       |
#     --------11----------5--------------------------------------------
#  hi |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 | vsRT1 | vsRT2 | VBFY1 | VBFY2 | VOCP  | vsOCP | VFAD  | VAVG  |
#  01 | vsRT3 | vsRT4 | vsGN  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  10 | VMFVC | VMTVC |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#  11 |  ---  |VT4444 |VT5551 |VT5650 |  ---  |  ---  |  ---  |  ---  |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu4_1_3_opcodes = {
    0b000000: "vsrt1.S",
    0b000001: "vsrt2.S",
    0b000010: "vbfy1.S",
    0b000011: "vbfy2.S",
    0b000100: "vocp.S",
    0b000101: "vsocp.S",
    0b000110: "vfad.S",
    0b000111: "vavg.S",
    0b001000: "vsrt3.S",
    0b001001: "vsrt4.S",
    0b001010: "vsgn.S",
    0b100000: "vmfvc.S",
    0b100001: "vmtvc.S",
    0b110001: "vt4444.S",
    0b110010: "vt5551.S",
    0b110011: "vt5650.S"
}

#     31-------26-----23----------------------------------------------0
#     |= VFPU5| f     |                                               |
#     -----6-------3---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#     | VPFXS | VPFXS | VPFXT | VPFXT | VPFXD | VPFXD | VIIM  | VFIM  |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu5_opcodes = {
    0b000: "vpfxs",
    0b001: "vpfxt",
    0b010: "vpfxd",
    0b011: "viim.s",
    0b100: "vfim.s"
}

#     31-------26-----23----------------------------------------------0
#     |= VFPU6| f     |                                               |
#     -----6-------3---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#     | VMMUL |     V(H)TFM2/3/4      | VMSCL |   *1  |  ---  |VF6-1.1|
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu6_opcodes = { # not sure about the last one
    0b000: "vmmul.s",
    0b001: "vtfm2.p",
    0b010: "vhtfm2.p",
    0b011: "vtfm3.t",
    0b100: "vmscl.s"
}

#     31--------23----20----------------------------------------------0
#     |= VF6-1.1 |  f |                                               |
#     -----9-------3---------------------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#     |VF6-1.2|  ---  |     VROT      |  ---  |  ---  |  ---  |  ---  |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu6_1_1_opcodes = {
    0b010: "vrot.S"
}

#     31--------20----16----------------------------------------------0
#     |= VF6-1.2 |  f |                                               |
#     -----6-------4---------------------------------------------------
#  hi |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#   0 | VMMOV |  ---  |  ---  | VMIDT |  ---  |  ---  |VMZERO | VMONE |
#   1 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |
#     |-------|-------|-------|-------|-------|-------|-------|-------|

vfpu6_1_2_opcodes = {
    0b0000: "vmmov.S",
    0b0011: "vmidt.S",
    0b0110: "vmzero.S",
    0b0111: "vmone.S"
}

#     31---------26------------------------------------------5--------0
#     |=       RSP|                                         | function|
#     ------6----------------------------------------------------6-----
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
# 000 | VMULF | VMULU | VRNDP | VMULQ | VMUDL | VMUDM | VMUDN | VMUDH | 00..07
# 001 | VMACF | VMACU | VRNDN | VMACQ | VMADL | VMADH | VMADN | VMADH | 08..0F
# 010 | VADD  | VSUB  | VSUT  | VABS  | VADDC | VSUBC | VADDB | VSUBB | 10..17
# 011 | VACCB | VSUCB | VSAD  | VSAC  | VSUM  | VSAR  | VACC  | VSUC  | 18..1F
# 100 | VLT   | VEQ   | VNE   | VGE   | VCL   | VCH   | VCR   | VMRG  | 20..27
# 101 | VAND  | VNAND | VOR   | VNOR  | VXOR  | VNXOR |  ---  |  ---  | 28..2F
# 110 | VRCP  | VRCPL | VRCPH | VMOV  | VRSQ  | VRSQL | VRSQH | VNOP  | 30..37
# 111 | VEXTT | VEXTQ | VEXTN |  ---  | VINST | VINSQ | VINSN | VNULL | 38..3F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

rsp_opcodes = {
    0b000000: "vmulf",
    0b000001: "vmulu",
    0b000010: "vrndp",
    0b000011: "vmulq",
    0b000100: "vmudl",
    0b000101: "vmudm",
    0b000110: "vmudn",
    0b000111: "vmudh",
    0b001000: "vmacf",
    0b001001: "vmacu",
    0b001010: "vrndn",
    0b001011: "vmacq",
    0b001100: "vmadl",
    0b001101: "vmadh",
    0b001110: "vmadn",
    0b001111: "vmadh",
    0b010000: "vadd",
    0b010001: "vsub",
    0b010010: "vsut",
    0b010011: "vabs",
    0b010100: "vaddc",
    0b010101: "vsubc",
    0b010110: "vaddb",
    0b010111: "vsubb",
    0b011000: "vaccb",
    0b011001: "vsucb",
    0b011010: "vsad",
    0b011011: "vsac",
    0b011100: "vsum",
    0b011101: "vsar",
    0b011110: "vacc",
    0b011111: "vsuc",
    0b100000: "vlt",
    0b100001: "veq",
    0b100010: "vne",
    0b100011: "vge",
    0b100100: "vcl",
    0b100101: "vch",
    0b100110: "vcr",
    0b100111: "vmrg",
    0b101000: "vand",
    0b101001: "vnand",
    0b101010: "vor",
    0b101011: "vnor",
    0b101100: "vxor",
    0b101101: "vnxor",
    0b110000: "vrcp",
    0b110001: "vrcpl",
    0b110010: "vrcph",
    0b110011: "vmov",
    0b110100: "vrsq",
    0b110101: "vrsql",
    0b110110: "vrsqh",
    0b110111: "vnop",
    0b111000: "vextt",
    0b111001: "vextq",
    0b111010: "vextn",
    0b111100: "vinst",
    0b111101: "vinsq",
    0b111110: "vinsn",
    0b111111: "vnull"
}

#     31---------26--------------------15-------11--------------------0
#     |=      LWC2|                    |   rd    |                    |
#     -----6----------------------5------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |  LBV  |  LSV  |  LLV  |  LDV  |  LQV  |  LRV  |  LPV  |  LUV  | 00..07
#  01 |  LHV  |  LFV  |  LWV  |  LTV  |  ---  |  ---  |  ---  |  ---  | 08..0F
#  10 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 10..17
#  11 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18..1F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

lwc2_opcodes = {
    0b000000: "lbv",
    0b000001: "lsv",
    0b000010: "llv",
    0b000011: "ldv",
    0b000100: "lqv",
    0b000101: "lrv",
    0b000110: "lpv",
    0b000111: "luv",
    0b001000: "lhv",
    0b001001: "lfv",
    0b001010: "lwv",
    0b001011: "ltv"
}

#     31---------26--------------------15-------11--------------------0
#     |=      SWC2|                    |   rd    |                    |
#     -----6----------------------5------------------------------------
#     |--000--|--001--|--010--|--011--|--100--|--101--|--110--|--111--| lo
#  00 |  SBV  |  SSV  |  SLV  |  SDV  |  SQV  |  SRV  |  SPV  |  SUV  | 00..07
#  01 |  SHV  |  SFV  |  SWV  |  STV  |  ---  |  ---  |  ---  |  ---  | 08..0F
#  10 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 10..17
#  11 |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  |  ---  | 18..1F
#  hi |-------|-------|-------|-------|-------|-------|-------|-------|

swc2_opcodes = {
    0b000000: "sbv",
    0b000001: "ssv",
    0b000010: "slv",
    0b000011: "sdv",
    0b000100: "sqv",
    0b000101: "srv",
    0b000110: "spv",
    0b000111: "suv",
    0b001000: "shv",
    0b001001: "sfv",
    0b001010: "swv",
    0b001011: "stv"
}

decodes()